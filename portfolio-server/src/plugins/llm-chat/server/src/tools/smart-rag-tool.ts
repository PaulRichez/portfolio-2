import { Tool } from "@langchain/core/tools";
import type { Core } from '@strapi/strapi';

/**
 * Outil LangChain intelligent qui utilise Ollama qwen3:0.6b pour d√©cider automatiquement quand utiliser le RAG
 * Cet outil analyse le message de l'utilisateur avec IA et d√©termine s'il n√©cessite
 * une recherche dans ChromaDB, puis effectue la recherche si n√©cessaire
 */
export class SmartRAGTool extends Tool {
  name = "smart_rag_search";
  description = `Outil intelligent de PaulIA qui utilise Ollama qwen3:0.6b pour analyser automatiquement si une question
  n√©cessite une recherche dans la base de donn√©es du portfolio de Paul et effectue la recherche appropri√©e.

  PaulIA utilise cet outil pour :
  - Analyser la pertinence des questions sur le profil de Paul
  - D√©terminer automatiquement si une recherche dans ses donn√©es est n√©cessaire
  - Extraire les mots-cl√©s optimaux pour trouver les bonnes informations
  - Adapter le nombre de r√©sultats selon le contexte de la question
  - Formater intelligemment les informations sur Paul

  Particuli√®rement efficace pour r√©pondre aux questions sur :
  - Les projets d√©velopp√©s par Paul (technologies, r√©alisations, d√©mos)
  - Ses comp√©tences techniques et son expertise
  - Son parcours professionnel et ses exp√©riences
  - Sa formation et son background
  - Ses informations de contact et liens professionnels

  Param√®tre d'entr√©e : la question du visiteur sur Paul (string)

  PaulIA d√©cide automatiquement :
  1. Si la question n√©cessite d'acc√©der aux donn√©es de Paul (avec niveau de confiance)
  2. Quels mots-cl√©s utiliser pour trouver les bonnes informations
  3. Combien d'√©l√©ments r√©cup√©rer pour r√©pondre compl√®tement
  4. Comment pr√©senter les informations de mani√®re engageante

  Exemples d'utilisation par PaulIA :
  - "Quels sont les projets React de Paul ?" ‚Üí IA d√©tecte: donn√©es n√©cessaires, mots-cl√©s: ["projets", "React"]
  - "Quel temps fait-il ?" ‚Üí IA d√©tecte: donn√©es non n√©cessaires (hors sujet Paul)
  - "Comment contacter Paul ?" ‚Üí IA d√©tecte: donn√©es n√©cessaires, mots-cl√©s: ["contact"]
  - "Parle-moi de l'exp√©rience de Paul ?" ‚Üí IA d√©tecte: donn√©es n√©cessaires, mots-cl√©s: ["exp√©rience"]`;

  private strapi: Core.Strapi;
  private chromaService: any;
  private ollamaService: any;

  constructor(strapi: Core.Strapi) {
    super();
    this.strapi = strapi;
    this.chromaService = strapi.plugin('llm-chat').service('chromaVectorService');
    this.ollamaService = strapi.plugin('llm-chat').service('ollamaService');
  }

  /**
   * Utilise Ollama qwen3:0.6b pour analyser si le message n√©cessite une recherche RAG
   * Remplace la logique manuelle par une analyse IA intelligente
   */
  private async analyzeWithOllama(message: string): Promise<{
    shouldUseRAG: boolean;
    confidence: number;
    keywords: string[];
    reasoning: string;
  }> {
    try {
      return await this.ollamaService.shouldUseRAGWithOllama(message);
    } catch (error) {
      this.strapi.log.error('‚ùå Ollama analysis failed, using fallback:', error);

      // Fallback √† l'analyse manuelle
      const shouldUseRAG = this.shouldUseRAGFallback(message);
      return {
        shouldUseRAG,
        confidence: 0.7,
        keywords: shouldUseRAG ? this.extractKeywordsFallback(message) : [],
        reasoning: `Fallback analysis used (Ollama error: ${error.message})`
      };
    }
  }

  /**
   * M√©thode de fallback pour l'analyse manuelle (utilis√©e si Ollama √©choue)
   */
  private shouldUseRAGFallback(message: string): boolean {
    const portfolioKeywords = [
      // Projets et r√©alisations
      'projet', 'projects', 'r√©alisation', 'r√©alisations', 'portfolio',
      'd√©velopp√©', 'd√©veloppement', 'cr√©√©', 'construit', 'built', 'created',

      // Comp√©tences et technologies
      'comp√©tence', 'comp√©tences', 'skills', 'skill', 'technologie', 'technologies',
      'ma√Ætrise', 'ma√Ætrises', 'connaissances', 'language', 'langages',

      // Technologies sp√©cifiques
      'react', 'vue', 'angular', 'nodejs', 'node', 'php', 'python', 'javascript',
      'typescript', 'html', 'css', 'bootstrap', 'tailwind', 'sass', 'scss',
      'mysql', 'mongodb', 'postgresql', 'firebase', 'aws', 'docker',
      'api', 'rest', 'graphql', 'strapi', 'wordpress', 'laravel',

      // Exp√©riences et formation
      'exp√©rience', 'exp√©riences', 'experience', 'experiences', 'travail', 'job',
      'formation', 'formations', 'education', '√©tude', '√©tudes', 'dipl√¥me', 'dipl√¥mes',
      'universit√©', '√©cole', 'cursus', 'parcours',

      // Informations personnelles
      'qui es-tu', 'qui √™tes-vous', 'pr√©sente-toi', 'pr√©sentez-vous',
      'pr√©sente', 'about', '√† propos', 'cv', 'profil', 'profile',
      'paul', 'nom', 'pr√©nom', '√¢ge', 'age',

      // Contact et liens
      'contact', 'contacter', 'joindre', 'email', 'mail', 't√©l√©phone', 'phone',
      'coordonn√©es', 'github', 'linkedin', 'site', 'website', 'portfolio',

      // Types de d√©veloppement
      'web', 'mobile', 'frontend', 'backend', 'fullstack', 'full-stack',
      'd√©veloppeur', 'developer', 'programmeur', 'programmer',

      // Questions g√©n√©rales sur la personne
      'toi', 'vous', 'ton', 'votre', 'tes', 'vos'
    ];

    const lowerMessage = message.toLowerCase();
    return portfolioKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  /**
   * M√©thode de fallback pour extraire les mots-cl√©s (utilis√©e si Ollama √©choue)
   */
  private extractKeywordsFallback(message: string): string[] {
    const lowerMessage = message.toLowerCase();

    // Mots-cl√©s sp√©cifiques √† rechercher en priorit√©
    const techKeywords = [
      'react', 'vue', 'angular', 'nodejs', 'php', 'python', 'javascript',
      'typescript', 'html', 'css', 'bootstrap', 'tailwind', 'mysql', 'mongodb'
    ];

    const contextKeywords = [
      'projet', 'projects', 'comp√©tence', 'skills', 'exp√©rience', 'experience',
      'formation', 'education', 'contact', 'portfolio'
    ];

    // Chercher les technologies mentionn√©es
    const foundTech = techKeywords.filter(tech => lowerMessage.includes(tech));

    // Chercher les contextes mentionn√©s
    const foundContext = contextKeywords.filter(context => lowerMessage.includes(context));

    return [...foundContext, ...foundTech];
  }

  /**
   * Construit la requ√™te de recherche optimale √† partir des mots-cl√©s
   */
  private buildSearchQuery(keywords: string[]): string {
    if (keywords.length === 0) {
      return '';
    }

    // Prioriser les mots-cl√©s contextuels et techniques
    const contextualWords = keywords.filter(k => ['projet', 'projects', 'comp√©tence', 'skills', 'exp√©rience', 'experience', 'formation', 'education', 'contact'].includes(k));
    const technicalWords = keywords.filter(k => ['react', 'vue', 'angular', 'nodejs', 'php', 'python', 'javascript', 'typescript'].includes(k));

    if (contextualWords.length > 0 && technicalWords.length > 0) {
      return `${contextualWords[0]} ${technicalWords.join(' ')}`;
    } else if (technicalWords.length > 0) {
      return technicalWords.join(' ');
    } else if (contextualWords.length > 0) {
      return contextualWords[0];
    } else {
      return keywords.join(' ');
    }
  }

  /**
   * D√©termine le nombre optimal de r√©sultats √† r√©cup√©rer bas√© sur l'analyse Ollama
   */
  private getOptimalResultCount(message: string, keywords: string[]): number {
    const lowerMessage = message.toLowerCase();

    // Questions tr√®s sp√©cifiques ‚Üí moins de r√©sultats
    if (lowerMessage.includes('contact') || lowerMessage.includes('t√©l√©phone') || lowerMessage.includes('email')) {
      return 2;
    }

    // Questions g√©n√©rales ‚Üí plus de r√©sultats
    if (lowerMessage.includes('tout') || lowerMessage.includes('tous') || lowerMessage.includes('liste')) {
      return 8;
    }

    // Selon le nombre de mots-cl√©s
    if (keywords.length > 3) {
      return 6;
    } else if (keywords.length > 1) {
      return 4;
    }

    // Par d√©faut
    return 5;
  }

  /**
   * Formate les r√©sultats ChromaDB pour PaulIA avec informations de l'analyse IA
   */
  private formatChromaResults(
    results: any[],
    originalQuery: string,
    searchQuery: string,
    analysis: { confidence: number; reasoning: string }
  ): string {
    if (!results || results.length === 0) {
      return `PaulIA n'a pas trouv√© d'informations sp√©cifiques pour "${originalQuery}". Recherche effectu√©e avec : "${searchQuery}". Je peux quand m√™me t'aider avec mes connaissances g√©n√©rales sur Paul !`;
    }

    const sections: string[] = [];
    sections.push(`=== ü§ñ PaulIA - Recherche intelligente pour "${originalQuery}" ===`);
    sections.push(`üéØ Analyse effectu√©e avec : "${searchQuery}"`);
    sections.push(`üß† Confiance IA : ${(analysis.confidence * 100).toFixed(1)}% - ${analysis.reasoning}`);
    sections.push('');

    results.forEach((result, index) => {
      const metadata = result.metadata || {};
      const collection = metadata.collection || 'unknown';
      const similarity = (1 - result.distance).toFixed(3);

      sections.push(`${index + 1}. ${this.getCollectionDisplayName(collection)} (Pertinence: ${similarity})`);
      sections.push(`   ${result.document.trim()}`);

      // Ajouter des m√©tadonn√©es pertinentes
      const relevantMetadata = this.extractRelevantMetadata(metadata);
      if (relevantMetadata.length > 0) {
        sections.push(`   üìã D√©tails: ${relevantMetadata.join(', ')}`);
      }

      sections.push(''); // Ligne vide entre les r√©sultats
    });

    sections.push(`=== ‚úÖ ${results.length} √©l√©ment${results.length > 1 ? 's' : ''} trouv√©${results.length > 1 ? 's' : ''} sur Paul ===`);
    sections.push('üí° PaulIA utilise ces informations pour te r√©pondre pr√©cis√©ment.');

    return sections.join('\n');
  }

  /**
   * Convertit les noms de collection en noms d'affichage
   */
  private getCollectionDisplayName(collection: string): string {
    const displayNames: Record<string, string> = {
      'api::project.project': 'üìÅ Projet',
      'api::me.me': 'üë§ Profil personnel',
      'api::coding.coding': 'üíª Technologie',
      'api::article.article': 'üìù Article',
      'api::faq.faq': '‚ùì FAQ',
      'api::experience.experience': 'üíº Exp√©rience',
      'api::education.education': 'üéì Formation'
    };

    return displayNames[collection] || `üìÑ ${collection}`;
  }

  /**
   * Extrait les m√©tadonn√©es pertinentes
   */
  private extractRelevantMetadata(metadata: any): string[] {
    const relevant: string[] = [];

    if (metadata.github_link) relevant.push(`GitHub: ${metadata.github_link}`);
    if (metadata.link_demo) relevant.push(`D√©mo: ${metadata.link_demo}`);
    if (metadata.link_npm) relevant.push(`NPM: ${metadata.link_npm}`);
    if (metadata.email) relevant.push(`Email: ${metadata.email}`);
    if (metadata.phoneNumber) relevant.push(`T√©l: ${metadata.phoneNumber}`);
    if (metadata.website) relevant.push(`Site: ${metadata.website}`);
    if (metadata.linkedin) relevant.push(`LinkedIn: ${metadata.linkedin}`);
    if (metadata.github) relevant.push(`GitHub: ${metadata.github}`);
    if (metadata.codings_names) relevant.push(`Technologies: ${metadata.codings_names}`);
    if (metadata.coding_skills_names) relevant.push(`Comp√©tences: ${metadata.coding_skills_names}`);
    if (metadata.category) relevant.push(`Cat√©gorie: ${metadata.category}`);
    if (metadata.languages) {
      const languageLabels = metadata.languages.split(', ').map(lang => {
        const [code, percentage] = lang.split(':');
        const level = this.getLanguageLevelLabel(parseInt(percentage));
        return `${code} (${level})`;
      }).join(', ');
      relevant.push(`Langues: ${languageLabels}`);
    }

    return relevant;
  }

  /**
   * Convertit un pourcentage en niveau de langue
   */
  private getLanguageLevelLabel(percentage: number): string {
    if (percentage >= 95) return 'Langue maternelle';
    if (percentage >= 85) return 'Courant';
    if (percentage >= 70) return 'Avanc√©';
    if (percentage >= 50) return 'Interm√©diaire';
    if (percentage >= 30) return 'D√©butant';
    return 'Notions';
  }

  /**
   * Ex√©cute l'analyse intelligente avec Ollama et la recherche RAG si n√©cessaire
   */
  async _call(input: string): Promise<string> {
    try {
      this.strapi.log.info('ü§ñ PaulIA SmartRAGTool: Starting AI analysis with Ollama qwen3:0.6b');

      // 1. Analyser avec Ollama si le RAG est n√©cessaire
      const analysis = await this.analyzeWithOllama(input);

      this.strapi.log.info('üß† Ollama analysis result:', {
        shouldUseRAG: analysis.shouldUseRAG,
        confidence: analysis.confidence,
        keywords: analysis.keywords,
        reasoning: analysis.reasoning
      });

      if (!analysis.shouldUseRAG) {
        this.strapi.log.info('‚ÑπÔ∏è PaulIA: AI determined no database search needed');
        return `PaulIA a d√©termin√© que cette question ne n√©cessite pas de recherche dans les donn√©es de Paul (confiance: ${(analysis.confidence * 100).toFixed(1)}%). Raison: ${analysis.reasoning}`;
      }

      // 2. Construire la requ√™te de recherche √† partir des mots-cl√©s IA
      const searchQuery = this.buildSearchQuery(analysis.keywords);
      this.strapi.log.info('üéØ SmartRAGTool: AI-generated search query:', searchQuery);

      // 3. D√©terminer le nombre optimal de r√©sultats
      const resultCount = this.getOptimalResultCount(input, analysis.keywords);

      // 4. Effectuer la recherche ChromaDB
      const searchTimerId = `üîç SmartRAG AI Search`;
      console.time(searchTimerId);

      const searchResults = await this.chromaService.searchDocuments(searchQuery, resultCount);

      console.timeEnd(searchTimerId);

      // 5. Formater et retourner les r√©sultats avec l'analyse IA
      if (!searchResults || searchResults.length === 0) {
        this.strapi.log.info('‚ÑπÔ∏è PaulIA: No relevant information found');
        return `PaulIA n'a pas trouv√© d'informations sp√©cifiques pour "${input}". Recherche effectu√©e avec : "${searchQuery}" (confiance: ${(analysis.confidence * 100).toFixed(1)}%). Je peux quand m√™me t'aider avec mes connaissances g√©n√©rales sur Paul !`;
      }

      const formattedResults = this.formatChromaResults(searchResults, input, searchQuery, analysis);

      this.strapi.log.info(`‚úÖ PaulIA: Found ${searchResults.length} relevant documents using AI analysis`);

      return formattedResults;

    } catch (error) {
      this.strapi.log.error('‚ùå PaulIA SmartRAGTool error:', error);
      return `PaulIA a rencontr√© une erreur lors de l'analyse pour "${input}". Je peux essayer de r√©pondre avec mes connaissances g√©n√©rales sur Paul.`;
    }
  }
}
