'use strict';

/**
 * Contr√¥leur pour la g√©n√©ration du CV
 */
export default ({ strapi }) => ({
  
  /**
   * G√©n√®re et retourne le CV en PDF
   */
  async generateCv(ctx) {
    try {
      console.log('üéØ G√©n√©ration du CV demand√©e');
      
      // G√©n√©rer le PDF
      const pdfStream = await strapi.service('api::me.cv').generateCvPdf();
      
      // Configuration des headers pour le PDF
      ctx.set({
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'inline; filename="CV-Paul-Richez.pdf"',
        'Cache-Control': 'no-cache'
      });
      
      // Streamer le PDF directement vers la r√©ponse
      ctx.body = pdfStream;
      ctx.respond = false; // Indiquer √† Koa de ne pas traiter automatiquement la r√©ponse
      
      // √âcrire le stream dans la r√©ponse
      pdfStream.pipe(ctx.res);
      
      // Finaliser le PDF
      pdfStream.end();
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du CV:', error);
      ctx.throw(500, `Erreur lors de la g√©n√©ration du CV: ${error.message}`);
    }
  },

  /**
   * T√©l√©charge le CV en PDF
   */
  async downloadCv(ctx) {
    try {
      console.log('üì• T√©l√©chargement du CV demand√©');
      
      // G√©n√©rer le PDF
      const pdfStream = await strapi.service('api::me.cv').generateCvPdf();
      
      // Configuration des headers pour le t√©l√©chargement
      ctx.set({
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="CV-Paul-Richez.pdf"',
        'Cache-Control': 'no-cache'
      });
      
      // Streamer le PDF directement vers la r√©ponse
      ctx.body = pdfStream;
      ctx.respond = false;
      
      // √âcrire le stream dans la r√©ponse
      pdfStream.pipe(ctx.res);
      
      // Finaliser le PDF
      pdfStream.end();
      
    } catch (error) {
      console.error('‚ùå Erreur lors du t√©l√©chargement du CV:', error);
      ctx.throw(500, `Erreur lors du t√©l√©chargement du CV: ${error.message}`);
    }
  }
});
